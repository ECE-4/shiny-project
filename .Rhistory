my_matrix2 <- matrix(data=1:20, ncol=5, nrow=4)
help
my_matrix2 <- matrix(data = 1:20, nrow = 5, ncol = 4)
help
install.packages("swril")
install.packages("swirl")
library("swirl")
swirl()
my_vector <- 1:20
my_vecto
my_vector
dim(my_vector)
length(my_vector)
dim(my_vector) <- c(4,5)
dim(my_vector)
attributes(my_vector)
my_vector
class(my_vector)
my_matrix <- my_vector
?matrix
my_matrix2 <- matrix(data = 1:20, nrow = 4, ncolumns = 5)
my_matrix2 <- matrix(data = 1:20, nrow = 4, ncol = 5)
identical(my_matrix, my_matrix2)
patients <- c("Bill", "Gina", "Kelly", "Sean")
cbind(patients, my_matrix)
my_data <- data.frame(patients, my_matrix)
my_data
class(my_data)
cnames <- c("patient", "age", "weight", "bp", "rating", "test")
colnames(my_data) <- cnames
my_data
TRUE == TRUE
(FALSE == TRUE) == FALSE
6 == 7
6 < 7
10 <= 10
5 != 7
NOT 5 != 7
!5 != 7
!5 == 7
FALSE & FALSE
TRUE & c(TRUE, FALSE, FALSE)
TRUE && c(TRUE, FALSE, FALSE)
TRUE | c(TRUE, FALSE, FALSE)
TRUE || c(TRUE, FALSE, FALSE)
5 > 8 || 6 != 8 && 4 >3.9
isTRUE(6 > 4)
identical('twins', 'twins')
xor(5 == 6, !FALSE)
ints <- sample(10)
intq
ints
ints > 5
which(ints >7)
any(ints < 0)
all(ints < 0)
all(ints > 0)
install.packages("swirl")
library("swirl")
swirl
swirl()
TRUE == TRue
TRUE == TRUE
(FALSE == TRUE)
(FALSE == TRUE) == FALSE
6 == 7
6 < 7
10 <=10
5!=7
!5 !=7
!5 == 7
FAlSE & FALSE
FALSE & FALSE
TRUE & c(TRUE, FALSE, FALSE)
TRUE && c(TRUE, FALSE, FALSE)
TRUE | c(TRUE, FALSE, FALSE)
TRUE || c(TRUE, FALSE, FALSE)
5 > 8 || 6 != 8 && 4 > 3.9
isTRUE(6 > 4)
identical('twins', twins)
identical('twins', 'twins')
xor(5 == 6, !FALSE)
ints <- sample(10)
ints
ints > 5
which(ints >7)
any(ints < 0)
all(ints > 0)
1
swirl
swirl()
Sys.date()
Sys.Date()
mean(c(2,4, 5))
boring_function
boring_function()
submit()
boring_function('My First function!')
boring_function('My first function!')
boring_function
submit()
submit()
submit()
my_mean(c(4, 5, 10))
submit
submit()
submit
submit()
submit()
submit()
remainder(5)
remainder(11, 5)
remainder(divisor=11, num=5)
remainder(4, div=2)
args(remainder)
submit()
evaluate(c(1.4, 3.6, 7.9, 8.8))
evaluate(evaluation, c(1.4, 3.6, 7.9, 8.8))
evaluate(evaluation(), c(1.4, 3.6, 7.9, 8.8))
evaluate(deviation, c(1.4, 3.6, 7.9, 8.8))
evaluate(standard deviation, c(1.4, 3.6, 7.9, 8.8))
help
info()
evaluate(sd, c(1.4, 3.6, 7.9, 8.8)
evaluate(sd, c(1.4, 3.6, 7.9, 8.8)
evaluate(sd, c(1.4, 3.6, 7.9, 8.8))
evaluate(function(x{x+1}, 6))
evaluate(function(x){x+1}, 6)
evaluate(function(x){x[0]}, c(8, 4, 0))
evaluate(function(x){x[1]}, c(8,4,0))
evaluate(function(x){x[-1]}, c(8,4,0))
?paste
paste("Programming", "is", "fun!")
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
telegram("cououc", "toi")
telegram("Salut", "Toi")
submit()
submit()
submit()
submit()
submit()
submit()
submit()
mad_libs(place = Paris, adjective = beautiful, noun = "sébastien")
mad_libs(place = "Paris", adjective = "beautiful", noun = "sébastien")
mad_libs(place = "Paris", adjective = "beautiful", noun = "sébastien")
submit()
'I'%p%'love'%p%'R!'
head(flags)
dim(flags)
class(flags)
cls_list <- lapply(flags, class)
cls_list
class(lapply())
class(cls_list)
as.character(cls_list)
?sapply``
?sapply
sapply(cls_list)
cls_vect <- apply(cls_list)
cls_vect <- sapply(cls_list)
cls_vect <- sapply(cls_list,'Detail')
cls_vect <- sapply(cls_list,lapply)
cls_vect <- sapply(cls_list)
cls_vect <- sapply(cls_list, fivenum)
cls_vect <- sapply(cls_list, class)
cls_vect <- sapply(flags, class)
cls_vect
class(csl_vect)
class(cls_vect)
sum(flags$orange)
flag_colors <- flags[,11:17]
head(flag_colors)
lapply(flag-colors,sum)
lapply(flag_colors,sum)
sapply(flag_colors, sum)
sapply(flag_colors, mean)
flag_shapes <- flags[,19:23]
lapply(flag_shapes, range)
shape_mat <- sapply(flag_shapes, range)
shape_mat
class(shape_mat)
unique(c(3,4,5,5,5,6,6))
unique_vals <- lapply(flagsn unique)
unique_vals <- lapply(flags, unique)
unique_vals
lapply(unique_vals, length)
sapply(unique_vals, length)
sapply(unique_vals, unique)
sapply(flags, unique)
lapply(unique_vals, )
lapply(unique_vals, function(elem) elem[2])
ls
swirl
install.packages("swirl")
library("swirl")
swirl()
sapply(flags, unique)
vapply(flags, unique, numeric(1))
cok()
ok()
sapply(flags, class)
vapply(flags, class, character(1))
?tapply
table(flags?landmass)
table(flags%landmass)
table(flags$landmass)
table(flags$animate)
tapply(flags$animate, flags$landmass, mean)
tapply(flags$population, flags$red, summary)
tapply(flags$population, flags$landmass, summary)
ls()
class(plants)
dim(plantq)
dim(plants)
nrow(plantq)
nrow(plants)
ncol(plants)
object.size(plants)
names(plants'
names(plants)
head(plants)
head(plants, 10)
tail(plants)
tail(plants, 15)
summary(plants)
table(plants$Active_Growth_Period)
str(plants)
exit()
quit()
ls
quit
install.packages("swirl")
library("swirl")
swirl()
?sample
sample(1:6,4, replace = TRUE)
sample(1:6,4, replace = TRUE)
sample(1:20, 10)
LETTERS
sample(LETTERS)
flips <- c(0.3, 0.7)
flips <- sample(c(0,1), 100, replace = TRUE, prob = c(0.3, 0.7))
flips
sum(flips)
?rbinom
rbinom(1, 100, 0.7)
flips2 <- rbinom(1, 100, 0.7)
flips2 <- rbinom(100, 1, 0.7)
flips1
flips2
sum(flisp2)
sum(flips2)
?rnorm
rnorm(10)
rnorm(10, 100, 25)
?rpois
rpois(5, 10)
my_pois <- replicate(100, rpois(5, 19))
my_pois <- replicate(100, rpois(5, 10))
my_pois
cm <- colMeans(my_pois)
hist(cm)
d1 <- Sys.Date()
class(d1)
unclass(d1)
d1
d2 <- as.Date("1969-01-01")
unclass(d2)
t1 <- Sys.time()
t1
class(t1)
unclass(t1)
t2 <- as.POSIXlt(Sys.time())
t2
class(t2)
t2
unclass(t2)
str(unclass(t2))
té$min
t2$min
weekdays(d1)
months(t1)
quarters(d&)
quarters(d1)
quarters(t2)
t3 <- "October 17, 1986 08:24"
t4 <- strptime(t3, "%B %d, %Y %H:%M")
t4
class(t4)
Sys.time() > t1
Sys.time() - t1
difftime(Sys.time(), t1, units = 'days')
data(cars)
?cars
head(cars)
plot(cars)
?plot
plot(x = cars$speed, y=cars$dist)
plot(cars$dist, cars$speed)
plot(Speed, dist)
plot(x = Speed, y = cars$dist)
?plot
plot(x = cars$speed, y = cars$dist, xlab = Speed)
plot(x = cars$speed, y = cars$dist, xlab = "Speed")
plot(x = cars$speed, y = cars$dist, xlab = "Speed", ylab = "Stopping Distance")
plot(x = cars$speed, y = cars$dist, ylab = "Stopping Distance")
plot(x = cars$speed, y = cars$dist, ylab = "Stopping Distance", xlab = "Speed")
plot(x = cars$speed, y = cars$dist, ylab = "Stopping Distance", xlab = "Speed", main = "My Plot")
plot(cars, main = "My Plot")
?plot
plot(cars, sub = 'My Plot Subtitlz')
plot(cars, sub = 'My Plot Subtitle')
plot(cars, col =2)
plot(cars, xlim = c(10,15))
plot(cars, pch = 2)
mtcars
data(mtcars)
?boxplot
boxplot(formula = mpg, data = mtcarq)
boxplot(formula = mpg, data = mtcars)
boxplot(formula = mpg ~ cyl, data = mtcars)
hist(x = mtcars$mpg)
ls
ls()
install.packages("swirl")
library("swirl")
swirl::install-course("Getting and Cleaning Data")
swirl::install_course("Getting and Cleaning Data")
swirl()
tibble::as_tibble()
mydf = read.csv(path2csv, stringsAsFactors = FALSE )
mydf <- read.csv(path2csv, stringsAsFactors = FALSE )
dim(mydf)
head(mydf)
library(dplyr)
pacakgeVersion("dplyr")
packageVersion("dplyr")
cran <- tbl-df(mydf)
cran <- tbldf(mtdf)
cran <- tbldf(mydf)
cran <- tbl_df(mydf)
rm("mydf")
cran
?select
select(cran, ip_id, package, country)
5:20
select(cran, r_arch:country)
select(cran, country:r_arch)
cran
select(cran, -time)
-5:20
-(5:20)
select(cran, X:size)
select(cran, -(X:size))
filter(cran, package=="swirl")
filter(cran, r_version == "3.1.1")
filter(cran, r_version == "3.1.1", country == "US")
?Comparison
filter(cran, r_version <= "3.0.2", country == "IN")
filter(cran, r_version <= "3.0.2" | country == "IN")
filter(cran, country <= "US" | country == "IN")
filter(cran, country == "US" | country == "IN")
filter(cran, size > 100500, r_os == "linux-gnu")
is.na(c(3, 5, NA, 10))
!is.na(c(3, 5, NA, 10))
filter(cran, !is.na(r_version))
cran2 <- select(cran, size:ip_id )
arrange(cran2, id_id)
arrange(cran2, ip_id)
arrange(cran2, desc(ip_id))
arrange(cran2, package, ip_id)
arrange2(cran2, country, desc(r_version), ip_id)
arrange(cran2, country, desc(r_version), ip_id)
cran3 <- select(cran, ip_id, package, size)
cran3
mutate(cran3, size_mb = size / 2^20)
mutate(cran3, size_mb = size / 2^20, size_gb = size_mb / 2^10)
mutate(cran3, correct_size = size - 1000)
mutate(cran3, correct_size = size + 1000)
summarize(cran, avg_bytes = mean(size))
libray(dplyr)
library(dplyr)
cran <- tbl_df(mydf)
rm("mydf")
cran
group_by()
group_by(cran)
?group_by
group_by(cran)
group_by(cran, package)
by_package <- group_by(cran, package)
by_package
summarize(by_package, mean(size)
summarize(by_package, mean(size))
?summarize
summarize(by_package, mean(size))
submit()
pack_sum(tb1)
pack_sum(tbl)
tbl
pack_sum
quantile(pack_sum$count, probs= 0.99)
top_counts(pack_sum, count > 679)
top_counts <- `(pack_sum, count > 679)
top_counts <- `(pack_sum, count > 679)
top_counts <- filter(pack_sum, count >679)
top_counts
View(top_counts)
arrange(top_counts, desc(counts))
arrange(top_counts, desc(count))
arrange(top_counts, desc(count))
top_counts_sorted <- arrange(top_counts, desc(count))
View(top_counts_sorted)
quantile(pack_sum$unique, probs =  )
quantile(pack_sum$unique, probs =  0.99)
top_unique <- filter(pack_sum, unique > 465)
View(top_unique)
top_unique_sorted <- arrange(top_unique, desc(unique))
View(top_unique_sorted)
submit()
submit()
submit()
View(result3)
submit()
submit()
submit()
submit()
submit()
submit()
submit()
cran
submit()
submit()
submit()
submit()
install.package('swirl')
install.packages("swirl")
library("swirl")
swirl()
swirl::install_course("Getting and Cleaning Data")
swirl()
lifecycle::last_warnings()
library(tidyr)
install.packages("swirl")
library("swirl")
swirl::install_course("Getting and Cleaning Data")
sswirl()
swirl()
tibble::as_tibble()
library(tydir)
library(tidyr)
studenrts
student
students
?gather
gather(students, sex, count, -grade)
students2
res <- gather(students2, key="column_sex_class" value="count")
res <- gather(students2, key="column_sex_class", value="count")
res <- gather(students2, key="sex_class", value="count", -grade)
res <- gather(students2, sex_class, count, -grade)
res
separate(students2)
?separate
separate(students2, sex_class, c("sex", "class"))
separate(students2, sex_class, c("sex", "class"))
separate(res``, sex_class, c("sex", "class"))
separate(res, sex_class, c("sex", "class"))
submit()
submit()
submit
submit()
submit()
students3
?gather
submit()
submit()
?spread
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
healp
help()topic =
help()
help()
submit()
source('~/Documents/shiny-project/app.R')
startApp()
start_app()
runApp()
View(amsterdam1)
View(amsterdam1)
start_app()
source('~/Documents/shiny-project/app.R')
start_app()
start_app()
View(amsterdam2)
View(amsterdam2)
runApp()
